openapi: 3.0.0
info:
  title: API de Gestion de Dette Boutique
  description: Here goes description
  version: 0.1.9

servers:
  - url: http://localhost:8000/api
    description: local server
  - url: http://producation.app/api
    description: production server
paths:
  /login:
    post:
      summary: Authentifie un utilisateur
      requestBody:
        description: Informations de connexion
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  example: "user@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: Connexion réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "access_token"
                  message:
                    type: string
                    example: "Login réussi"
        '401':
          description: Échec de la connexion
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: "Non autorisé"

  /clients:
    get:
      summary: Récupère la liste des clients
      parameters:
        - name: include
          in: query
          description: Relations à inclure
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Liste des clients
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Client'
                  message:
                    type: string
                    example: "Liste des clients"
  
    post:
      summary: Crée un nouveau client
      requestBody:
        description: Informations du client à créer
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                surname:
                  type: string
                  example: "Doe"
                adresse:
                  type: string
                  example: "123 Rue Exemple"
                telephone:
                  type: string
                  example: "+123456789"
                user:
                  type: object
                  properties:
                    nom:
                      type: string
                      example: "John"
                    prenom:
                      type: string
                      example: "Doe"
                    login:
                      type: string
                      example: "john.doe@example.com"
                    password:
                      type: string
                      example: "password123"
                    role:
                      type: string
                      example: "admin"
      responses:
        '201':
          description: Client créé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 201
                  data:
                    $ref: '#/components/schemas/Client'
                  message:
                    type: string
                    example: "Client créé avec succès"
        '500':
          description: Erreur lors de la création du client
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: "Erreur lors de la création du client"

  /articles:
    get:
      summary: Récupère la liste des articles
      parameters:
        - name: disponible
          in: query
          description: Filtrer les articles par disponibilité
          required: false
          schema:
            type: string
            enum:
              - oui
              - non
        - name: per_page
          in: query
          description: Nombre d'articles par page
          required: false
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: Liste des articles
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
                  message:
                    type: string
                    example: "Liste des articles"

    post:
      summary: Crée un nouvel article
      requestBody:
        description: Informations de l'article à créer
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                libelle:
                  type: string
                  example: "Article Exemple"
                prix:
                  type: number
                  format: float
                  example: 19.99
                qteStock:
                  type: integer
                  example: 100
      responses:
        '201':
          description: Article créé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 201
                  data:
                    $ref: '#/components/schemas/Article'
                  message:
                    type: string
                    example: "Article enregistré avec succès"

components:
  schemas:
    Client:
      type: object
      properties:
        id:
          type: integer
          example: 1
        surname:
          type: string
          example: "Doe"
        adresse:
          type: string
          example: "123 Rue Exemple"
        telephone:
          type: string
          example: "+123456789"
    
    Article:
      type: object
      properties:
        id:
          type: integer
          example: 1
        libelle:
          type: string
          example: "Article Exemple"
        prix:
          type: number
          format: float
          example: 19.99
        qteStock:
          type: integer
          example: 100
